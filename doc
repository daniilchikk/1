Утилита fscheck предназначена для проверки целостности файловой системы в Ozone. Она может сканировать все тома, бакеты и ключи (объекты), выявлять повреждённые ключи и при необходимости удалять их. Данный инструмент полезен в ситуациях, когда требуется оперативно проверить состояние данных и устранить потенциальные проблемы, такие как «битые» блоки или некорректные контейнеры.

Основные возможности:
	•	Сканирование всех (или заданных по префиксу) томов, бакетов и ключей.
	•	Проверка блоков и чанков, из которых состоят ключи (объекты).
	•	Отображение и/или удаление повреждённых ключей.
	•	Подробная информация о ключах, контейнерах, блоках и чанках в различных режимах «детализированности» (verbosity).
	•	Сохранение результатов проверки в консоль, в файл или в формате JSON.
	•	Возможность продолжить сканирование с позиции последней проверки (механизм «checkpoint»).

Синтаксис запуска

ozone sh fscheck [опции]

Опция	Описание
--volume-prefix	Задаёт префикс названия томов (volume), которые должны быть включены в проверку. Если параметр не указан, будут сканироваться все доступные тома.
--bucket-prefix	Задаёт префикс названия бакетов (bucket), которые должны быть включены в проверку. Если параметр не указан, будут сканироваться все бакеты во всех выбранных томах.
--key-prefix	Задаёт префикс названия ключей (объектов), которые должны быть включены в проверку. Если не указан, будут сканироваться все ключи в каждом бакете.
--delete	При указании этой опции fscheck будет автоматически удалять все ключи, признанные повреждёнными (corrupted). Без этой опции все некорректные объекты лишь будут отображаться в отчёте, но не удаляться.
--healthy-keys	При указании выводится информация и о «хороших» (неповреждённых) ключах. По умолчанию утилита ориентирована в первую очередь на вывод проблемных ключей.
--verbosity-level	Уровень детализации вывода. Допустимые значения: KEY, CONTAINER, BLOCK, CHUNK.- KEY: выводит информацию только об имени ключа.- CONTAINER: выводит также информацию о контейнерах ключа.- BLOCK: дополнительно к контейнерам выводит информацию о блоках.- CHUNK: выводит и информацию о чанках каждого блока. Значение по умолчанию — KEY.
--output, -o	Путь к файлу, в который будет записан отчёт о проверке. По умолчанию (если опция не указана) отчёт выводится на стандартный вывод (stdout).
--output-format	Формат вывода: PLAIN_TEXT, JSON или XML. По умолчанию используется JSON. Формат XML в текущей версии не поддерживается и вызовет исключение.
--checkpoint	Путь к файлу, в котором хранится промежуточное состояние (checkpoint) для возобновления проверки. По умолчанию — /tmp/ckeckpoint.txt. В случае аварийной остановки утилиты сканирование может быть возобновлено с последнего сохранённого положения.

Механизм checkpoint
	•	Файл чекпойнта (--checkpoint) используется для сохранения промежуточного состояния проверки.
	•	Если сканирование прерывается, при следующем запуске утилиты fscheck прочитает этот файл и продолжит с точки, на которой остановилась.
	•	По завершении (если сканирование выполнено корректно и до конца) утилита удалит этот файл.
	•	При желании можно указать собственный путь к файлу чекпойнта, например: --checkpoint=/var/ozone/fscheck_checkpoint.txt.

Логика работы
	1.	Инициализация:
	•	Создаётся или читается файл чекпойнта, если был указан --checkpoint.
	•	Ищутся тома, удовлетворя опции --volume-prefix, затем внутри — бакеты, затем — ключи.
	2.	Сканирование:
	•	Для каждого ключа (объекта) запрашивается детальная информация в Ozone Manager (OM).
	•	Полученные блоки (BlockData) и контейнеры (ContainerData) проверяются на корректность, в том числе рассылаются запросы на DataNode’ы.
	•	При выявлении повреждённого блока или чанка ключ помечается как «corrupted».
	•	Если указано --delete, ключ автоматически удаляется.
	3.	Вывод результатов:
	•	Зависят от параметров --verbosity-level, --healthy-keys, --output и --output-format.
	•	По умолчанию утилита выведет основные сведения в JSON-формате в консоль, если другие параметры не были заданы.
	4.	Обновление/Удаление чекпойнта:
	•	В процессе сканирования каждая «точка остановки» (том, бакет, ключ) сохраняется в файл чекпойнта.
	•	Если сканирование завершается успешно, файл чекпойнта удаляется. Если процесс обрывается, при следующем запуске сканирование продолжится с последней сохранённой точки.

Ограничения и важные замечания
	•	Формат XML в текущей реализации не поддерживается (выбросит исключение при попытке указать --output-format=XML).
	•	При большом количестве томов, бакетов и ключей процесс сканирования может занять значительное время; рекомендуются соответствующие ресурсы и планирование.
	•	Опция --delete следует использовать с осторожностью, так как удаление повреждённых ключей является необратимым действием.
	•	Утилита проверяет блоки путём запросов на DataNode’ы. При проблемах сети результаты могут быть неполными или возникнут ошибки ввода-вывода (IOException).
	•	Если Вам нужно отслеживать как «хорошие», так и «плохие» ключи, не забудьте указать --healthy-keys.

